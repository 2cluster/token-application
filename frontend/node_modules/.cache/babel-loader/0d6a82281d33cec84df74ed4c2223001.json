{"ast":null,"code":"var _jsxFileName = \"/home/ruud/project/token-application/frontend/src/components/Dapp.js\";\nimport React from \"react\"; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\nimport contractABI from \"../contracts/StableCoin-abi.json\";\nimport contractADR from \"../contracts/StableCoin-adr.json\"; // All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\"; // This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\n\nconst HARDHAT_NETWORK_ID = '31337'; // This is an error code that indicates that the user canceled a transaction\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001; // This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      total: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/React.createElement(NoWalletDetected, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }\n      });\n    } // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n\n\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/React.createElement(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      });\n    } // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n\n    if (!this.state.tokenData || !this.state.balance) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 14\n        }\n      });\n    }\n\n    console.log(this.state); // If everything is loaded, we render the application.\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Contract Info\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Token:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, this.state.tokenData.name)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \"Symbol:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 24\n      }\n    }, this.state.tokenData.symbol)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Address:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, this._token.address)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"TotalSupply:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }, \"$ \", (Math.round(this.state.tokenData.total * (100 ^ this._token.decimals)) / (100 ^ this._token.decimals)).toFixed(this._token.decimals).toString())))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4 card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }, \"Wallet\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, \"Address:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, this.state.selectedAddress)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"Balance:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, (Math.round(this.state.balance * 100) / 100).toFixed(2).toString())), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Allowed:  \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, this.state.allowance.toString()))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, this.state.txBeingSent && /*#__PURE__*/React.createElement(WaitingForTransactionMessage, {\n      txHash: this.state.txBeingSent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }), this.state.transactionError && /*#__PURE__*/React.createElement(TransactionErrorMessage, {\n      message: this._getRpcErrorMessage(this.state.transactionError),\n      dismiss: () => this._dismissTransactionError(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n      selectedAddress: this.state.selectedAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Transfer, {\n      transferTokens: (to, amount) => this._transferTokens(to, amount),\n      tokenSymbol: this.state.tokenData.symbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n      selectedAddress: this.state.selectedAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Allowance, {\n      approve: (spender, amount) => this._setAllowance(spender, amount),\n      tokenSymbol: this.state.tokenData.symbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n      selectedAddress: this.state.selectedAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Allowance, {\n      approve: (spender, amount) => this._setAllowance(spender, amount),\n      tokenSymbol: this.state.tokenData.symbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n      selectedAddress: this.state.selectedAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Allowance, {\n      approve: (spender, amount) => this._setAllowance(spender, amount),\n      tokenSymbol: this.state.tokenData.symbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._intializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum); // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._token = new ethers.Contract(contractADR.StableCoin, contractABI.abi, this._provider.getSigner(0));\n  } // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateAccount();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  } // The next two methods just read from the contract and store the results\n  // in the component state.\n\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n    this.setState({\n      tokenData: {\n        name,\n        symbol,\n        decimals,\n        total\n      }\n    });\n  }\n\n  async _updateAccount() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n    const allowance = await this._token.allowance(this.state.selectedAddress, \"0x559BC07434C89c5496d790DFD2885dC966F9113a\");\n    this.setState({\n      allowance\n    });\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _transferTokens(to, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({\n        txBeingSent: tx2.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx2.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/ruud/project/token-application/frontend/src/components/Dapp.js"],"names":["React","ethers","contractABI","contractADR","NoWalletDetected","ConnectWallet","Loading","Transfer","Allowance","TransactionErrorMessage","WaitingForTransactionMessage","NoTokensMessage","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","Component","constructor","props","initialState","tokenData","undefined","total","selectedAddress","balance","txBeingSent","transactionError","networkError","state","render","window","ethereum","_connectWallet","_dismissNetworkError","console","log","name","symbol","_token","address","Math","round","decimals","toFixed","toString","allowance","_getRpcErrorMessage","_dismissTransactionError","eq","gt","to","amount","_transferTokens","spender","_setAllowance","componentWillUnmount","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","Contract","StableCoin","abi","getSigner","_pollDataInterval","setInterval","_updateAccount","clearInterval","totalSupply","balanceOf","tx","transfer","hash","receipt","wait","status","Error","error","code","tx2","approve","data","message","networkVersion"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractABI from \"../contracts/StableCoin-abi.json\";\nimport contractADR from \"../contracts/StableCoin-adr.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      total: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.tokenData || !this.state.balance) {\n      return <Loading />;\n    }\n\n    console.log(this.state)\n    // If everything is loaded, we render the application.\n    return (\n      <div className=\"p-4\">\n        <div className=\"row\">\n          <div className=\"col-12 card\">\n            <h1>\n              Contract Info\n            </h1>\n            <p>\n              Token:  <b>{this.state.tokenData.name}</b>\n            </p>\n            <p>\n              Symbol:  <b>{this.state.tokenData.symbol}</b>\n            </p>\n            <p>\n              Address:  <b>{this._token.address}</b>\n            </p>\n            <p>\n              TotalSupply:  <b>$ {(Math.round(this.state.tokenData.total * (100^this._token.decimals)) / (100^this._token.decimals)).toFixed(this._token.decimals).toString()}</b>\n            </p>\n\n          </div>\n        </div>\n\n\n        <div className=\"row\">\n        <div className=\"col-4 card\">\n            <h2>\n              Wallet\n            </h2>\n            <p>\n              Address:  <b>{this.state.selectedAddress}</b>\n            </p>\n            <p>\n              Balance:  <b>{(Math.round(this.state.balance * 100) / 100).toFixed(2).toString()}</b>\n            </p>\n            <p>\n              Allowed:  <b>{this.state.allowance.toString()}</b>\n            </p>\n          </div>\n          <div className=\"col-4\">\n            {/* \n              Sending a transaction isn't an immidiate action. You have to wait\n              for it to be mined.\n              If we are waiting for one, we show a message here.\n            */}\n            {this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={this.state.txBeingSent} />\n            )}\n\n            {/* \n              Sending a transaction can fail in multiple ways. \n              If that happened, we show a message here.\n            */}\n            {this.state.transactionError && (\n              <TransactionErrorMessage\n                message={this._getRpcErrorMessage(this.state.transactionError)}\n                dismiss={() => this._dismissTransactionError()}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-4\">\n            {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n            {this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n            {this.state.balance.gt(0) && (\n              <Transfer\n                transferTokens={(to, amount) =>\n                  this._transferTokens(to, amount)\n                }\n                tokenSymbol={this.state.tokenData.symbol}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row card\">\n          <div className=\"col-4\">\n            {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n            {this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n            {this.state.balance.gt(0) && (\n              <Allowance\n                approve={(spender, amount) =>\n                  this._setAllowance(spender, amount)\n                }\n                tokenSymbol={this.state.tokenData.symbol}\n              />\n            )}\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4\">\n              {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n            <div className=\"col-4\">\n              {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      contractADR.StableCoin,\n      contractABI.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateAccount();\n\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n\n    this.setState({ tokenData: { name, symbol, decimals, total } });\n  }\n\n  async _updateAccount() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n\n    const allowance = await this._token.allowance(this.state.selectedAddress, \"0x559BC07434C89c5496d790DFD2885dC966F9113a\");\n    this.setState({ allowance });\n\n  }\n\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({ txBeingSent: tx2.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx2.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}