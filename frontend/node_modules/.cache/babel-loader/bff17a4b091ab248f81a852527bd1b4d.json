{"ast":null,"code":"var _jsxFileName = \"/home/ruud/project/token-application/frontend/src/components/Dapp.js\";\nimport React from \"react\"; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\nimport ABI from \"../contract/abi.json\";\nimport ADR from \"../contract/adr.json\";\nimport ACC from \"../contract/acc.json\"; // All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { Contract } from \"./Contract\";\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001; // This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      tokenData: undefined,\n      total: undefined,\n      selectedAddress: undefined,\n      selectedName: undefined,\n      balance: undefined,\n      allowance: undefined,\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      accountError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/React.createElement(NoWalletDetected, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (this.state.networkError) {\n      return /*#__PURE__*/React.createElement(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (this.state.accountError || this.state.accounts === undefined || this.state.selectedAddress !== this.state.accounts.controller.toLowerCase() && this.state.selectedAddress !== this.state.accounts.party1.toLowerCase() && this.state.selectedAddress !== this.state.accounts.party2.toLowerCase()) {\n      return /*#__PURE__*/React.createElement(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.accountError,\n        dismiss: () => this._dismissAccountError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (!this.state.tokenData || !this.state.accounts) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (this.state.selectedName === \"controller\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Contract, {\n        tokenData: this.state.tokenData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container p-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, \"Wallet\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }, \"Holder's name:  \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }\n      }, this.state.selectedName)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }, \"Address:  \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 27\n        }\n      }, this.state.selectedAddress)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, \"Balance:  \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 27\n        }\n      }, \"$ \", (Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / this.state.tokenData.decimals ** 10).toFixed(this.state.tokenData.decimals).toString())), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }, \"Allowed:  \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 27\n        }\n      }, \"$ \", (Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / this.state.tokenData.decimals ** 10).toFixed(this.state.tokenData.decimals).toString()))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, this.state.txBeingSent && /*#__PURE__*/React.createElement(WaitingForTransactionMessage, {\n        txHash: this.state.txBeingSent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 43\n        }\n      }), this.state.transactionError && /*#__PURE__*/React.createElement(TransactionErrorMessage, {\n        message: this._getRpcErrorMessage(this.state.transactionError),\n        dismiss: () => this._dismissTransactionError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Transfer, {\n        transferTokens: (to, amount) => this._transferTokens(to, amount),\n        tokenSymbol: this.state.tokenData.symbol,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Allowance, {\n        approve: (spender, amount) => this._setAllowance(spender, amount),\n        tokenSymbol: this.state.tokenData.symbol,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 19\n        }\n      })))));\n    } else if (this.state.selectedName === \"party1\" || this.state.selectedName === \"party2\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Contract, {\n        tokenData: this.state.tokenData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container p-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }\n      }, \"Wallet\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 19\n        }\n      }, \"Name:\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 19\n        }\n      }, \"Address:\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 19\n        }\n      }, \"Balance:\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 19\n        }\n      }, \"Approved:\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 22\n        }\n      }, this.state.selectedName)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 22\n        }\n      }, this.state.selectedAddress)), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 22\n        }\n      }, \"$ \", (Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / this.state.tokenData.decimals ** 10).toFixed(this.state.tokenData.decimals).toString())), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 22\n        }\n      }, \"$ \", (Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / this.state.tokenData.decimals ** 10).toFixed(this.state.tokenData.decimals).toString()))))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }, this.state.txBeingSent && /*#__PURE__*/React.createElement(WaitingForTransactionMessage, {\n        txHash: this.state.txBeingSent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 43\n        }\n      }), this.state.transactionError && /*#__PURE__*/React.createElement(TransactionErrorMessage, {\n        message: this._getRpcErrorMessage(this.state.transactionError),\n        dismiss: () => this._dismissTransactionError(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }\n      }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Transfer, {\n        transferTokens: (to, amount) => this._transferTokens(to, amount),\n        tokenSymbol: this.state.tokenData.symbol,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }\n      }), this.state.balance.gt(0) && /*#__PURE__*/React.createElement(Allowance, {\n        approve: (spender, amount) => this._setAllowance(spender, amount),\n        tokenSymbol: this.state.tokenData.symbol,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }, this.state.balance.eq(0) && /*#__PURE__*/React.createElement(NoTokensMessage, {\n        selectedAddress: this.state.selectedAddress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 19\n        }\n      })))));\n    }\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n\n      this._resetState();\n\n      this._initialize(newAddress);\n\n      return;\n    });\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  async _initialize(userAddress) {\n    let accounts = ACC.accounts;\n    let wallet = {};\n    let selectedName = undefined;\n    await Object.keys(accounts).forEach(key => {\n      if (userAddress.toLowerCase() === key.toLowerCase()) {\n        selectedName = accounts[key];\n        wallet[accounts[key]] = key;\n      } else {\n        wallet[accounts[key]] = key;\n      }\n    });\n    await this.setState({\n      accounts: wallet,\n      selectedName: selectedName,\n      selectedAddress: userAddress\n    });\n\n    if (selectedName === undefined) {\n      this.setState({\n        accountError: 'Please use one of the first 5 accounts provided by the mnemonic in .env '\n      });\n      return false;\n    }\n\n    this._intializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n\n    return true;\n  }\n\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._token = new ethers.Contract(ADR.contract, ABI.abi, this._provider.getSigner(0));\n  }\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000);\n\n    this._updateAccount();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n    const address = await this._token.address;\n    this.setState({\n      tokenData: {\n        name,\n        symbol,\n        decimals,\n        total,\n        address\n      }\n    });\n  }\n\n  async _updateAccount() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    await this.setState({\n      balance\n    });\n    const allowance = await this._token.allowance(this.state.selectedAddress, this.state.accounts.controller);\n    await this.setState({\n      allowance\n    });\n  }\n\n  async _transferTokens(to, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({\n        txBeingSent: tx2.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx2.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  }\n\n  _dismissAccountError() {\n    this.setState({\n      accountError: undefined\n    });\n    return;\n  }\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    let network = ADR.network;\n\n    if (window.ethereum.networkVersion !== ADR.networkId) {\n      this.setState({\n        networkError: `Please connect Metamask to network: ${network}`\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  _checkAccounts() {\n    if (this.state.accounts === undefined || this.state.selectedAddress !== this.state.accounts.controller.toLowerCase() && this.state.selectedAddress !== this.state.accounts.party1.toLowerCase() && this.state.selectedAddress !== this.state.accounts.party2.toLowerCase()) {\n      this.setState({\n        accountError: 'Please use one of the first accounts provided by the mnemonic in .env '\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/ruud/project/token-application/frontend/src/components/Dapp.js"],"names":["React","ethers","ABI","ADR","ACC","NoWalletDetected","ConnectWallet","Loading","Transfer","Allowance","TransactionErrorMessage","WaitingForTransactionMessage","NoTokensMessage","Contract","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","Component","constructor","props","initialState","tokenData","undefined","total","selectedAddress","selectedName","balance","allowance","txBeingSent","transactionError","networkError","accountError","state","render","window","ethereum","_connectWallet","_dismissNetworkError","accounts","controller","toLowerCase","party1","party2","_dismissAccountError","Math","round","decimals","toFixed","toString","_getRpcErrorMessage","_dismissTransactionError","eq","gt","to","amount","_transferTokens","symbol","spender","_setAllowance","componentWillUnmount","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","wallet","Object","keys","forEach","key","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","contract","abi","getSigner","_pollDataInterval","setInterval","_updateAccount","clearInterval","name","totalSupply","address","balanceOf","tx","transfer","hash","receipt","wait","status","Error","error","code","console","tx2","approve","data","message","network","networkVersion","_checkAccounts"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport ABI from \"../contract/abi.json\";\nimport ADR from \"../contract/adr.json\";\nimport ACC from \"../contract/acc.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { Contract } from \"./Contract\";\n\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      tokenData: undefined,\n      total: undefined,\n      selectedAddress: undefined,\n      selectedName: undefined,\n      balance: undefined,\n      allowance: undefined,\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      accountError: undefined,\n    };\n\n    this.state = this.initialState;\n\n  }\n\n\n\n  render() {\n\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n\n    if (this.state.networkError) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    if (this.state.accountError || \n        this.state.accounts === undefined || \n      ((this.state.selectedAddress !== this.state.accounts.controller.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.party1.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.party2.toLowerCase()))) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.accountError}\n          dismiss={() => this._dismissAccountError()}\n        />\n      );\n    }\n\n    if (!this.state.tokenData || !this.state.accounts) {\n      return <Loading />;\n    }\n\n    if (this.state.selectedName === \"controller\") {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"row\">\n            <div className=\"container p-3\">\n              <h2>Wallet</h2>\n              <p>\n                Holder's name:  <b>{this.state.selectedName}</b>\n              </p>\n              <p>\n                Address:  <b>{this.state.selectedAddress}</b>\n              </p>\n              <p>\n                Balance:  <b>$ {(Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n              </p>\n              <p>\n                Allowed:  <b>$ {(Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n              </p>\n            </div>\n            <div>\n              {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n              {this.state.transactionError && (\n                <TransactionErrorMessage\n                  message={this._getRpcErrorMessage(this.state.transactionError)}\n                  dismiss={() => this._dismissTransactionError()}\n                />)}\n  \n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n                This component displays a form that the user can use to send a \n                transaction and transfer some tokens.\n                The component doesn't have logic, it just calls the transferTokens\n                callback.\n              */}\n              {this.state.balance.gt(0) && (\n                <Transfer\n                  transferTokens={(to, amount) =>\n                    this._transferTokens(to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n          </div>\n\n          <div className=\"row card\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n            <div className=\"row\">\n              <div className=\"col-4\">\n\n                {this.state.balance.eq(0) && (\n                  <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n                )}\n\n\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n\n\n    } else if (this.state.selectedName === \"party1\" || this.state.selectedName === \"party2\") {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"row\">\n            <div className=\"container p-3\">\n              <h2>Wallet</h2>\n              <div className=\"row\">\n                <div className=\"col-6\">\n                  <p>Name:</p>\n                  <p>Address:</p>\n                  <p>Balance:</p>\n                  <p>Approved:</p>\n                </div>\n                <div className=\"col-6\">\n                  <p><b>{this.state.selectedName}</b></p>\n                  <p><b>{this.state.selectedAddress}</b></p>\n                  <p><b>$ {(Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                  <p><b>$ {(Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                </div>\n              </div>\n            </div>\n            <div>\n\n              {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n\n              {this.state.transactionError && (\n                <TransactionErrorMessage\n                  message={this._getRpcErrorMessage(this.state.transactionError)}\n                  dismiss={() => this._dismissTransactionError()}\n                />)}\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n                This component displays a form that the user can use to send a \n                transaction and transfer some tokens.\n                The component doesn't have logic, it just calls the transferTokens\n                callback.\n              */}\n              {this.state.balance.gt(0) && (\n                <Transfer\n                  transferTokens={(to, amount) =>\n                    this._transferTokens(to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n          </div>\n\n          <div className=\"row card\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n            <div className=\"row\">\n              <div className=\"col-4\">\n\n                {this.state.balance.eq(0) && (\n                  <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n                )}\n\n\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n\n    }\n  }\n\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n    \n    this._initialize(selectedAddress)\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      this._resetState();\n\n      this._initialize(newAddress);\n\n      return\n    });\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  async _initialize(userAddress) {\n\n    let accounts = ACC.accounts\n    let wallet = {}\n    let selectedName = undefined\n    await Object.keys(accounts).forEach(key => {\n      if(userAddress.toLowerCase() === key.toLowerCase()) {\n        selectedName = accounts[key]\n        wallet[accounts[key]] = key\n      } else {\n        wallet[accounts[key]] = key\n      }\n    });\n\n    await this.setState({\n      accounts: wallet,\n      selectedName: selectedName,\n      selectedAddress: userAddress,\n    });\n\n    if(selectedName === undefined) {\n      this.setState({\n        accountError: 'Please use one of the first 5 accounts provided by the mnemonic in .env '\n      });\n      return false\n    }\n\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n\n    return true\n  }\n\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    this._token = new ethers.Contract(\n      ADR.contract,\n      ABI.abi,\n      this._provider.getSigner(0)\n    );\n\n\n  }\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000);\n\n    this._updateAccount();\n\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n    const address = await this._token.address;\n\n    this.setState({ tokenData: { name, symbol, decimals, total, address } });\n  }\n\n  async _updateAccount() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    await this.setState({ balance });\n\n    const allowance = await this._token.allowance(this.state.selectedAddress, this.state.accounts.controller);\n    await this.setState({ allowance });\n\n  }\n\n  async _transferTokens(to, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({ txBeingSent: tx2.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx2.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _dismissAccountError() {\n    this.setState({ accountError: undefined });\n    return;\n  }\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    let network = ADR.network\n\n    if (window.ethereum.networkVersion !== ADR.networkId) {\n      this.setState({\n        networkError: `Please connect Metamask to network: ${network}`\n      });\n  \n      return false;\n    }\n    return true\n  }\n\n  _checkAccounts() {\n\n    if (this.state.accounts === undefined ||\n      ((this.state.selectedAddress !== this.state.accounts.controller.toLowerCase())&&(this.state.selectedAddress !== this.state.accounts.party1.toLowerCase())&&(this.state.selectedAddress !== this.state.accounts.party2.toLowerCase())) ) {\n      this.setState({\n        accountError: 'Please use one of the first accounts provided by the mnemonic in .env '\n      });\n      return false\n    }\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}