{"ast":null,"code":"import _regeneratorRuntime from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/ruud/project/hardhat-hackathon-boilerplate/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";// We'll use ethers to interact with the Ethereum network and our contract\nimport{ethers}from\"ethers\";// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractABI from\"../contracts/StableCoin-abi.json\";import contractADR from\"../contracts/StableCoin-adr.json\";// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport{NoWalletDetected}from\"./NoWalletDetected\";import{ConnectWallet}from\"./ConnectWallet\";import{Loading}from\"./Loading\";import{Transfer}from\"./Transfer\";import{Allowance}from\"./Allowance\";import{TransactionErrorMessage}from\"./TransactionErrorMessage\";import{WaitingForTransactionMessage}from\"./WaitingForTransactionMessage\";import{NoTokensMessage}from\"./NoTokensMessage\";// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nvar HARDHAT_NETWORK_ID='31337';// This is an error code that indicates that the user canceled a transaction\nvar ERROR_CODE_TX_REJECTED_BY_USER=4001;// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport var Dapp=/*#__PURE__*/function(_React$Component){_inherits(Dapp,_React$Component);var _super=_createSuper(Dapp);function Dapp(props){var _this;_classCallCheck(this,Dapp);_this=_super.call(this,props);// We store multiple things in Dapp's state.\n// You don't need to follow this pattern, but it's an useful example.\n_this.initialState={// The info of the token (i.e. It's Name and symbol)\ntokenData:undefined,// The user's address and balance\ntotal:undefined,selectedAddress:undefined,balance:undefined,// The ID about transactions being sent, and any possible error with them\ntxBeingSent:undefined,transactionError:undefined,networkError:undefined};_this.state=_this.initialState;return _this;}_createClass(Dapp,[{key:\"render\",value:function render(){var _this2=this;// Ethereum wallets inject the window.ethereum object. If it hasn't been\n// injected, we instruct the user to install MetaMask.\nif(window.ethereum===undefined){return/*#__PURE__*/React.createElement(NoWalletDetected,null);}// The next thing we need to do, is to ask the user to connect their wallet.\n// When the wallet gets connected, we are going to save the users's address\n// in the component's state. So, if it hasn't been saved yet, we have\n// to show the ConnectWallet component.\n//\n// Note that we pass it a callback that is going to be called when the user\n// clicks a button. This callback just calls the _connectWallet method.\nif(!this.state.selectedAddress){return/*#__PURE__*/React.createElement(ConnectWallet,{connectWallet:function connectWallet(){return _this2._connectWallet();},networkError:this.state.networkError,dismiss:function dismiss(){return _this2._dismissNetworkError();}});}// If the token data or the user's balance hasn't loaded yet, we show\n// a loading component.\nif(!this.state.tokenData||!this.state.balance){return/*#__PURE__*/React.createElement(Loading,null);}// If everything is loaded, we render the application.\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"container p-4\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-6 card\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Wallet\"),/*#__PURE__*/React.createElement(\"p\",null,\"Token:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.tokenData.name,\" (\",this.state.tokenData.symbol,\")\")),/*#__PURE__*/React.createElement(\"p\",null,\"Address:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedAddress)),/*#__PURE__*/React.createElement(\"p\",null,\"Balance:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.balance.toString())),/*#__PURE__*/React.createElement(\"p\",null,\"Allowed:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.allowance.toString()))),/*#__PURE__*/React.createElement(\"div\",{className:\"col-6 card\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Contract Info\"),/*#__PURE__*/React.createElement(\"p\",null,\"Token:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.tokenData.name,\" (\",this.state.tokenData.symbol,\")\")),/*#__PURE__*/React.createElement(\"p\",null,\"Address:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedAddress)),/*#__PURE__*/React.createElement(\"p\",null,\"Balance:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.balance.toString())))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-12\"},this.state.txBeingSent&&/*#__PURE__*/React.createElement(WaitingForTransactionMessage,{txHash:this.state.txBeingSent}),this.state.transactionError&&/*#__PURE__*/React.createElement(TransactionErrorMessage,{message:this._getRpcErrorMessage(this.state.transactionError),dismiss:function dismiss(){return _this2._dismissTransactionError();}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-12\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Transfer,{transferTokens:function transferTokens(to,amount){return _this2._transferTokens(to,amount);},tokenSymbol:this.state.tokenData.symbol}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-12\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Allowance,{approve:function approve(spender,amount){return _this2._setAllowance(spender,amount);},tokenSymbol:this.state.tokenData.symbol}))));}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){// We poll the user's balance, so we have to stop doing that when Dapp\n// gets unmounted\nthis._stopPollingData();}},{key:\"_connectWallet\",value:function(){var _connectWallet2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this3=this;var _yield$window$ethereu,_yield$window$ethereu2,selectedAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return window.ethereum.enable();case 2:_yield$window$ethereu=_context.sent;_yield$window$ethereu2=_slicedToArray(_yield$window$ethereu,1);selectedAddress=_yield$window$ethereu2[0];if(this._checkNetwork()){_context.next=7;break;}return _context.abrupt(\"return\");case 7:this._initialize(selectedAddress);// We reinitialize it whenever the user changes their account.\nwindow.ethereum.on(\"accountsChanged\",function(_ref){var _ref2=_slicedToArray(_ref,1),newAddress=_ref2[0];_this3._stopPollingData();// `accountsChanged` event can be triggered with an undefined newAddress.\n// This happens when the user removes the Dapp from the \"Connected\n// list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n// To avoid errors, we reset the dapp state \nif(newAddress===undefined){return _this3._resetState();}_this3._initialize(newAddress);});// We reset the dapp state if the network is changed\nwindow.ethereum.on(\"networkChanged\",function(_ref3){var _ref4=_slicedToArray(_ref3,1),networkId=_ref4[0];_this3._stopPollingData();_this3._resetState();});case 10:case\"end\":return _context.stop();}}},_callee,this);}));function _connectWallet(){return _connectWallet2.apply(this,arguments);}return _connectWallet;}()},{key:\"_initialize\",value:function _initialize(userAddress){// This method initializes the dapp\n// We first store the user's address in the component's state\nthis.setState({selectedAddress:userAddress});// Then, we initialize ethers, fetch the token's data, and start polling\n// for the user's balance.\n// Fetching the token data and the user's balance are specific to this\n// sample project, but you can reuse the same initialization pattern.\nthis._intializeEthers();this._getTokenData();this._startPollingData();}},{key:\"_intializeEthers\",value:function(){var _intializeEthers2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// We first initialize ethers by creating a provider using window.ethereum\nthis._provider=new ethers.providers.Web3Provider(window.ethereum);// When, we initialize the contract using that provider and the token's\n// artifact. You can do this same thing with your contracts.\nthis._token=new ethers.Contract(contractADR.StableCoin,contractABI.abi,this._provider.getSigner(0));console.log(this._provider);case 3:case\"end\":return _context2.stop();}}},_callee2,this);}));function _intializeEthers(){return _intializeEthers2.apply(this,arguments);}return _intializeEthers;}()// The next to methods are needed to start and stop polling data. While\n// the data being polled here is specific to this example, you can use this\n// pattern to read any data from your contracts.\n//\n// Note that if you don't need it to update in near real time, you probably\n// don't need to poll it. If that's the case, you can just fetch it when you\n// initialize the app, as we do with the token data.\n},{key:\"_startPollingData\",value:function _startPollingData(){var _this4=this;this._pollDataInterval=setInterval(function(){return _this4._updateBalance();},1000);// We run it once immediately so we don't have to wait for it\nthis._updateBalance();this._updateAllowance();}},{key:\"_stopPollingData\",value:function _stopPollingData(){clearInterval(this._pollDataInterval);this._pollDataInterval=undefined;}// The next two methods just read from the contract and store the results\n// in the component state.\n},{key:\"_getTokenData\",value:function(){var _getTokenData2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var name,symbol,total;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return this._token.name();case 2:name=_context3.sent;_context3.next=5;return this._token.symbol();case 5:symbol=_context3.sent;_context3.next=8;return this._token.totalSupply();case 8:total=_context3.sent;this.setState({tokenData:{name:name,symbol:symbol,total:total}});case 10:case\"end\":return _context3.stop();}}},_callee3,this);}));function _getTokenData(){return _getTokenData2.apply(this,arguments);}return _getTokenData;}()},{key:\"_updateBalance\",value:function(){var _updateBalance2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var balance;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return this._token.balanceOf(this.state.selectedAddress);case 2:balance=_context4.sent;this.setState({balance:balance});case 4:case\"end\":return _context4.stop();}}},_callee4,this);}));function _updateBalance(){return _updateBalance2.apply(this,arguments);}return _updateBalance;}()},{key:\"_updateAllowance\",value:function(){var _updateAllowance2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var allowance;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return this._token.allowance(this.state.selectedAddress,\"0x559BC07434C89c5496d790DFD2885dC966F9113a\");case 2:allowance=_context5.sent;this.setState({allowance:allowance});case 4:case\"end\":return _context5.stop();}}},_callee5,this);}));function _updateAllowance(){return _updateAllowance2.apply(this,arguments);}return _updateAllowance;}()// This method sends an ethereum transaction to transfer tokens.\n// While this action is specific to this application, it illustrates how to\n// send a transaction.\n},{key:\"_transferTokens\",value:function(){var _transferTokens2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(to,amount){var tx,receipt;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;// If a transaction fails, we save that error in the component's state.\n// We only save one such error, so before sending a second transaction, we\n// clear it.\nthis._dismissTransactionError();// We send the transaction, and save its hash in the Dapp's state. This\n// way we can indicate that we are waiting for it to be mined.\n_context6.next=4;return this._token.transfer(to,amount);case 4:tx=_context6.sent;this.setState({txBeingSent:tx.hash});// We use .wait() to wait for the transaction to be mined. This method\n// returns the transaction's receipt.\n_context6.next=8;return tx.wait();case 8:receipt=_context6.sent;if(!(receipt.status===0)){_context6.next=11;break;}throw new Error(\"Transaction failed\");case 11:_context6.next=13;return this._updateBalance();case 13:_context6.next=21;break;case 15:_context6.prev=15;_context6.t0=_context6[\"catch\"](0);if(!(_context6.t0.code===ERROR_CODE_TX_REJECTED_BY_USER)){_context6.next=19;break;}return _context6.abrupt(\"return\");case 19:// Other errors are logged and stored in the Dapp's state. This is used to\n// show them to the user, and for debugging.\nconsole.error(_context6.t0);this.setState({transactionError:_context6.t0});case 21:_context6.prev=21;// If we leave the try/catch, we aren't sending a tx anymore, so we clear\n// this part of the state.\nthis.setState({txBeingSent:undefined});return _context6.finish(21);case 24:case\"end\":return _context6.stop();}}},_callee6,this,[[0,15,21,24]]);}));function _transferTokens(_x,_x2){return _transferTokens2.apply(this,arguments);}return _transferTokens;}()},{key:\"_setAllowance\",value:function(){var _setAllowance2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(spender,amount){var tx2,receipt;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;// If a transaction fails, we save that error in the component's state.\n// We only save one such error, so before sending a second transaction, we\n// clear it.\nthis._dismissTransactionError();// We send the transaction, and save its hash in the Dapp's state. This\n// way we can indicate that we are waiting for it to be mined.\n_context7.next=4;return this._token.approve(spender,amount);case 4:tx2=_context7.sent;this.setState({txBeingSent:tx2.hash});// We use .wait() to wait for the transaction to be mined. This method\n// returns the transaction's receipt.\n_context7.next=8;return tx2.wait();case 8:receipt=_context7.sent;if(!(receipt.status===0)){_context7.next=11;break;}throw new Error(\"Transaction failed\");case 11:_context7.next=13;return this._updateBalance();case 13:_context7.next=21;break;case 15:_context7.prev=15;_context7.t0=_context7[\"catch\"](0);if(!(_context7.t0.code===ERROR_CODE_TX_REJECTED_BY_USER)){_context7.next=19;break;}return _context7.abrupt(\"return\");case 19:// Other errors are logged and stored in the Dapp's state. This is used to\n// show them to the user, and for debugging.\nconsole.error(_context7.t0);this.setState({transactionError:_context7.t0});case 21:_context7.prev=21;// If we leave the try/catch, we aren't sending a tx anymore, so we clear\n// this part of the state.\nthis.setState({txBeingSent:undefined});return _context7.finish(21);case 24:case\"end\":return _context7.stop();}}},_callee7,this,[[0,15,21,24]]);}));function _setAllowance(_x3,_x4){return _setAllowance2.apply(this,arguments);}return _setAllowance;}()// This method just clears part of the state.\n},{key:\"_dismissTransactionError\",value:function _dismissTransactionError(){this.setState({transactionError:undefined});}// This method just clears part of the state.\n},{key:\"_dismissNetworkError\",value:function _dismissNetworkError(){this.setState({networkError:undefined});}// This is an utility method that turns an RPC error into a human readable\n// message.\n},{key:\"_getRpcErrorMessage\",value:function _getRpcErrorMessage(error){if(error.data){return error.data.message;}return error.message;}// This method resets the state\n},{key:\"_resetState\",value:function _resetState(){this.setState(this.initialState);}// This method checks if Metamask selected network is Localhost:8545 \n},{key:\"_checkNetwork\",value:function _checkNetwork(){if(window.ethereum.networkVersion===HARDHAT_NETWORK_ID){return true;}this.setState({networkError:'Please connect Metamask to Localhost:8545'});return false;}}]);return Dapp;}(React.Component);","map":{"version":3,"sources":["/home/ruud/project/hardhat-hackathon-boilerplate/frontend/src/components/Dapp.js"],"names":["React","ethers","contractABI","contractADR","NoWalletDetected","ConnectWallet","Loading","Transfer","Allowance","TransactionErrorMessage","WaitingForTransactionMessage","NoTokensMessage","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","props","initialState","tokenData","undefined","total","selectedAddress","balance","txBeingSent","transactionError","networkError","state","window","ethereum","_connectWallet","_dismissNetworkError","name","symbol","toString","allowance","_getRpcErrorMessage","_dismissTransactionError","eq","gt","to","amount","_transferTokens","spender","_setAllowance","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","Contract","StableCoin","abi","getSigner","console","log","_pollDataInterval","setInterval","_updateBalance","_updateAllowance","clearInterval","totalSupply","balanceOf","transfer","tx","hash","wait","receipt","status","Error","code","error","approve","tx2","data","message","networkVersion","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractABI from \"../contracts/StableCoin-abi.json\";\nimport contractADR from \"../contracts/StableCoin-adr.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      total: undefined,\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet \n          connectWallet={() => this._connectWallet()} \n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.tokenData || !this.state.balance) {\n      return <Loading />;\n    }\n\n    // If everything is loaded, we render the application.\n    return (\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-6 card\">\n            <h1>\n             Wallet\n            </h1>\n            <p>\n              Token:  <b>{this.state.tokenData.name} ({this.state.tokenData.symbol})</b>\n            </p>\n            <p>\n              Address:  <b>{this.state.selectedAddress}</b>\n            </p>\n            <p>\n              Balance:  <b>{this.state.balance.toString()}</b>\n            </p>\n            <p>\n              Allowed:  <b>{this.state.allowance.toString()}</b>\n            </p>\n          </div>\n          <div className=\"col-6 card\">\n            <h1>\n             Contract Info\n            </h1>\n            <p>\n              Token:  <b>{this.state.tokenData.name} ({this.state.tokenData.symbol})</b>\n            </p>\n            <p>\n              Address:  <b>{this.state.selectedAddress}</b>\n            </p>\n            <p>\n              Balance:  <b>{this.state.balance.toString()}</b>\n            </p>\n\n          </div>\n        </div>\n\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/* \n              Sending a transaction isn't an immidiate action. You have to wait\n              for it to be mined.\n              If we are waiting for one, we show a message here.\n            */}\n            {this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={this.state.txBeingSent} />\n            )}\n\n            {/* \n              Sending a transaction can fail in multiple ways. \n              If that happened, we show a message here.\n            */}\n            {this.state.transactionError && (\n              <TransactionErrorMessage\n                message={this._getRpcErrorMessage(this.state.transactionError)}\n                dismiss={() => this._dismissTransactionError()}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row card\">\n          <div className=\"col-12\">\n            {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n            {this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n            {this.state.balance.gt(0) && (\n              <Transfer\n                transferTokens={(to, amount) =>\n                  this._transferTokens(to, amount)\n                }\n                tokenSymbol={this.state.tokenData.symbol}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row card\">\n          <div className=\"col-12\">\n            {/*\n              If the user has no tokens, we don't show the Tranfer form\n            */}\n            {this.state.balance.eq(0) && (\n              <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n            )}\n\n            {/*\n              This component displays a form that the user can use to send a \n              transaction and transfer some tokens.\n              The component doesn't have logic, it just calls the transferTokens\n              callback.\n            */}\n            {this.state.balance.gt(0) && (\n              <Allowance\n                approve={(spender, amount) =>\n                  this._setAllowance(spender, amount)\n                }\n                tokenSymbol={this.state.tokenData.symbol}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      contractADR.StableCoin,\n      contractABI.abi,\n      this._provider.getSigner(0)\n    );\n\n    console.log(this._provider);\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n    this._updateAllowance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const total = await this._token.totalSupply();\n\n    this.setState({ tokenData: { name, symbol, total } });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n\n  async _updateAllowance() {\n    const allowance = await this._token.allowance(this.state.selectedAddress, \"0x559BC07434C89c5496d790DFD2885dC966F9113a\");\n    this.setState({ allowance });\n  }\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({ txBeingSent: tx2.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx2.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({ \n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}