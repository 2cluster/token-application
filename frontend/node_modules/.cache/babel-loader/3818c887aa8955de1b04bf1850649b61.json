{"ast":null,"code":"import _regeneratorRuntime from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/ruud/project/token-application/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";// We'll use ethers to interact with the Ethereum network and our contract\nimport{ethers}from\"ethers\";// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractABI from\"../contracts/StableUSD-abi.json\";import contractADR from\"../contracts/StableUSD-adr.json\";// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport{NoWalletDetected}from\"./NoWalletDetected\";import{ConnectWallet}from\"./ConnectWallet\";import{Loading}from\"./Loading\";import{Transfer}from\"./Transfer\";import{Allowance}from\"./Allowance\";import{TransactionErrorMessage}from\"./TransactionErrorMessage\";import{WaitingForTransactionMessage}from\"./WaitingForTransactionMessage\";import{NoTokensMessage}from\"./NoTokensMessage\";import{Contract}from\"./Contract\";// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nvar HARDHAT_NETWORK_ID='31337';// This is an error code that indicates that the user canceled a transaction\nvar ERROR_CODE_TX_REJECTED_BY_USER=4001;// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport var Dapp=/*#__PURE__*/function(_React$Component){_inherits(Dapp,_React$Component);var _super=_createSuper(Dapp);function Dapp(props){var _this;_classCallCheck(this,Dapp);_this=_super.call(this,props);// We store multiple things in Dapp's state.\n// You don't need to follow this pattern, but it's an useful example.\n_this.initialState={tokenData:undefined,total:undefined,selectedAddress:undefined,selectedName:undefined,balance:undefined,allowance:undefined,txBeingSent:undefined,transactionError:undefined,networkError:undefined,accountError:undefined};_this.state=_this.initialState;return _this;}_createClass(Dapp,[{key:\"render\",value:function render(){var _this2=this;if(window.ethereum===undefined){return/*#__PURE__*/React.createElement(NoWalletDetected,null);}if(!this.state.selectedAddress){return/*#__PURE__*/React.createElement(ConnectWallet,{connectWallet:function connectWallet(){return _this2._connectWallet();},networkError:this.state.networkError,dismiss:function dismiss(){return _this2._dismissNetworkError();}});}if(this.state.selectedAddress!==\"0x559bc07434c89c5496d790dfd2885dc966f9113a\"&&this.state.selectedAddress!==\"0x6dc89393fa30b64c56deff31daacf10cedcd852d\"&&this.state.selectedAddress!==\"0x54806dd512b21814aa560d627432a75720ed6bb3\"){return/*#__PURE__*/React.createElement(ConnectWallet,{connectWallet:function connectWallet(){return _this2._connectWallet();},accountError:this.state.accountError,dismiss:function dismiss(){return _this2._dismissAccountError();}});}if(!this.state.tokenData||!this.state.balance){return/*#__PURE__*/React.createElement(Loading,null);}if(this.state.selectedName===\"controller\"){return/*#__PURE__*/React.createElement(\"div\",{className:\"\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(Contract,{tokenData:this.state.tokenData})),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container p-3\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Wallet\"),/*#__PURE__*/React.createElement(\"p\",null,\"Holder's name:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedName)),/*#__PURE__*/React.createElement(\"p\",null,\"Address:  \",/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedAddress)),/*#__PURE__*/React.createElement(\"p\",null,\"Balance:  \",/*#__PURE__*/React.createElement(\"b\",null,\"$ \",(Math.round(this.state.balance*Math.pow(this.state.tokenData.decimals,10))/Math.pow(this.state.tokenData.decimals,10)).toFixed(this.state.tokenData.decimals).toString())),/*#__PURE__*/React.createElement(\"p\",null,\"Allowed:  \",/*#__PURE__*/React.createElement(\"b\",null,\"$ \",(Math.round(this.state.allowance*Math.pow(this.state.tokenData.decimals,10))/Math.pow(this.state.tokenData.decimals,10)).toFixed(this.state.tokenData.decimals).toString()))),/*#__PURE__*/React.createElement(\"div\",null,this.state.txBeingSent&&/*#__PURE__*/React.createElement(WaitingForTransactionMessage,{txHash:this.state.txBeingSent}),this.state.transactionError&&/*#__PURE__*/React.createElement(TransactionErrorMessage,{message:this._getRpcErrorMessage(this.state.transactionError),dismiss:function dismiss(){return _this2._dismissTransactionError();}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Transfer,{transferTokens:function transferTokens(to,amount){return _this2._transferTokens(to,amount);},tokenSymbol:this.state.tokenData.symbol}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Allowance,{approve:function approve(spender,amount){return _this2._setAllowance(spender,amount);},tokenSymbol:this.state.tokenData.symbol})),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress})))));}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(Contract,{tokenData:this.state.tokenData})),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container p-3\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Wallet\"),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-6\"},/*#__PURE__*/React.createElement(\"p\",null,\"Name:\"),/*#__PURE__*/React.createElement(\"p\",null,\"Address:\"),/*#__PURE__*/React.createElement(\"p\",null,\"Balance:\"),/*#__PURE__*/React.createElement(\"p\",null,\"Approved:\")),/*#__PURE__*/React.createElement(\"div\",{className:\"col-6\"},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedName)),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"b\",null,this.state.selectedAddress)),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"b\",null,\"$ \",(Math.round(this.state.balance*Math.pow(this.state.tokenData.decimals,10))/Math.pow(this.state.tokenData.decimals,10)).toFixed(this.state.tokenData.decimals).toString())),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"b\",null,\"$ \",(Math.round(this.state.allowance*Math.pow(this.state.tokenData.decimals,10))/Math.pow(this.state.tokenData.decimals,10)).toFixed(this.state.tokenData.decimals).toString()))))),/*#__PURE__*/React.createElement(\"div\",null,this.state.txBeingSent&&/*#__PURE__*/React.createElement(WaitingForTransactionMessage,{txHash:this.state.txBeingSent}),this.state.transactionError&&/*#__PURE__*/React.createElement(TransactionErrorMessage,{message:this._getRpcErrorMessage(this.state.transactionError),dismiss:function dismiss(){return _this2._dismissTransactionError();}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Transfer,{transferTokens:function transferTokens(to,amount){return _this2._transferTokens(to,amount);},tokenSymbol:this.state.tokenData.symbol}))),/*#__PURE__*/React.createElement(\"div\",{className:\"row card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress}),this.state.balance.gt(0)&&/*#__PURE__*/React.createElement(Allowance,{approve:function approve(spender,amount){return _this2._setAllowance(spender,amount);},tokenSymbol:this.state.tokenData.symbol})),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-4\"},this.state.balance.eq(0)&&/*#__PURE__*/React.createElement(NoTokensMessage,{selectedAddress:this.state.selectedAddress})))));}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){// We poll the user's balance, so we have to stop doing that when Dapp\n// gets unmounted\nthis._stopPollingData();}},{key:\"_connectWallet\",value:function(){var _connectWallet2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this3=this;var _yield$window$ethereu,_yield$window$ethereu2,selectedAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return window.ethereum.enable();case 2:_yield$window$ethereu=_context.sent;_yield$window$ethereu2=_slicedToArray(_yield$window$ethereu,1);selectedAddress=_yield$window$ethereu2[0];if(this._checkNetwork()){_context.next=7;break;}return _context.abrupt(\"return\");case 7:this._initialize(selectedAddress);if(this._checkAccounts()){_context.next=10;break;}return _context.abrupt(\"return\");case 10:// We reinitialize it whenever the user changes their account.\nwindow.ethereum.on(\"accountsChanged\",function(_ref){var _ref2=_slicedToArray(_ref,1),newAddress=_ref2[0];_this3._stopPollingData();// `accountsChanged` event can be triggered with an undefined newAddress.\n// This happens when the user removes the Dapp from the \"Connected\n// list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n// To avoid errors, we reset the dapp state \nif(newAddress===undefined){return _this3._resetState();}_this3._initialize(newAddress);});// We reset the dapp state if the network is changed\nwindow.ethereum.on(\"networkChanged\",function(_ref3){var _ref4=_slicedToArray(_ref3,1),networkId=_ref4[0];_this3._stopPollingData();_this3._resetState();});case 12:case\"end\":return _context.stop();}}},_callee,this);}));function _connectWallet(){return _connectWallet2.apply(this,arguments);}return _connectWallet;}()},{key:\"_initialize\",value:function _initialize(userAddress){var accounts=[];accounts['0x559bc07434c89c5496d790dfd2885dc966f9113a']=\"controller\";accounts['0x54806dd512b21814aa560d627432a75720ed6bb3']=\"party1\";accounts['0x6dc89393fa30b64c56deff31daacf10cedcd852d']=\"party2\";this.setState({selectedName:accounts[userAddress],selectedAddress:userAddress});// Then, we initialize ethers, fetch the token's data, and start polling\n// for the user's balance.\n// Fetching the token data and the user's balance are specific to this\n// sample project, but you can reuse the same initialization pattern.\nthis._intializeEthers();this._getTokenData();this._startPollingData();}},{key:\"_intializeEthers\",value:function(){var _intializeEthers2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// We first initialize ethers by creating a provider using window.ethereum\nthis._provider=new ethers.providers.Web3Provider(window.ethereum);// When, we initialize the contract using that provider and the token's\n// artifact. You can do this same thing with your contracts.\nthis._token=new ethers.Contract(contractADR.StableCoin,contractABI.abi,this._provider.getSigner(0));case 2:case\"end\":return _context2.stop();}}},_callee2,this);}));function _intializeEthers(){return _intializeEthers2.apply(this,arguments);}return _intializeEthers;}()// The next to methods are needed to start and stop polling data. While\n// the data being polled here is specific to this example, you can use this\n// pattern to read any data from your contracts.\n//\n// Note that if you don't need it to update in near real time, you probably\n// don't need to poll it. If that's the case, you can just fetch it when you\n// initialize the app, as we do with the token data.\n},{key:\"_startPollingData\",value:function _startPollingData(){var _this4=this;this._pollDataInterval=setInterval(function(){return _this4._updateAccount();},1000);this._updateAccount();}},{key:\"_stopPollingData\",value:function _stopPollingData(){clearInterval(this._pollDataInterval);this._pollDataInterval=undefined;}},{key:\"_getTokenData\",value:function(){var _getTokenData2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var name,symbol,decimals,total,address;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return this._token.name();case 2:name=_context3.sent;_context3.next=5;return this._token.symbol();case 5:symbol=_context3.sent;_context3.next=8;return this._token.decimals();case 8:decimals=_context3.sent;_context3.next=11;return this._token.totalSupply();case 11:total=_context3.sent;_context3.next=14;return this._token.address;case 14:address=_context3.sent;this.setState({tokenData:{name:name,symbol:symbol,decimals:decimals,total:total,address:address}});case 16:case\"end\":return _context3.stop();}}},_callee3,this);}));function _getTokenData(){return _getTokenData2.apply(this,arguments);}return _getTokenData;}()},{key:\"_updateAccount\",value:function(){var _updateAccount2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var balance,allowance;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return this._token.balanceOf(this.state.selectedAddress);case 2:balance=_context4.sent;this.setState({balance:balance});_context4.next=6;return this._token.allowance(this.state.selectedAddress,\"0x559BC07434C89c5496d790DFD2885dC966F9113a\");case 6:allowance=_context4.sent;this.setState({allowance:allowance});case 8:case\"end\":return _context4.stop();}}},_callee4,this);}));function _updateAccount(){return _updateAccount2.apply(this,arguments);}return _updateAccount;}()},{key:\"_transferTokens\",value:function(){var _transferTokens2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(to,amount){var tx,receipt;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;// If a transaction fails, we save that error in the component's state.\n// We only save one such error, so before sending a second transaction, we\n// clear it.\nthis._dismissTransactionError();// We send the transaction, and save its hash in the Dapp's state. This\n// way we can indicate that we are waiting for it to be mined.\n_context5.next=4;return this._token.transfer(to,amount);case 4:tx=_context5.sent;this.setState({txBeingSent:tx.hash});// We use .wait() to wait for the transaction to be mined. This method\n// returns the transaction's receipt.\n_context5.next=8;return tx.wait();case 8:receipt=_context5.sent;if(!(receipt.status===0)){_context5.next=11;break;}throw new Error(\"Transaction failed\");case 11:_context5.next=13;return this._updateAccount();case 13:_context5.next=21;break;case 15:_context5.prev=15;_context5.t0=_context5[\"catch\"](0);if(!(_context5.t0.code===ERROR_CODE_TX_REJECTED_BY_USER)){_context5.next=19;break;}return _context5.abrupt(\"return\");case 19:// Other errors are logged and stored in the Dapp's state. This is used to\n// show them to the user, and for debugging.\nconsole.error(_context5.t0);this.setState({transactionError:_context5.t0});case 21:_context5.prev=21;// If we leave the try/catch, we aren't sending a tx anymore, so we clear\n// this part of the state.\nthis.setState({txBeingSent:undefined});return _context5.finish(21);case 24:case\"end\":return _context5.stop();}}},_callee5,this,[[0,15,21,24]]);}));function _transferTokens(_x,_x2){return _transferTokens2.apply(this,arguments);}return _transferTokens;}()},{key:\"_setAllowance\",value:function(){var _setAllowance2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(spender,amount){var tx2,receipt;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;// If a transaction fails, we save that error in the component's state.\n// We only save one such error, so before sending a second transaction, we\n// clear it.\nthis._dismissTransactionError();// We send the transaction, and save its hash in the Dapp's state. This\n// way we can indicate that we are waiting for it to be mined.\n_context6.next=4;return this._token.approve(spender,amount);case 4:tx2=_context6.sent;this.setState({txBeingSent:tx2.hash});// We use .wait() to wait for the transaction to be mined. This method\n// returns the transaction's receipt.\n_context6.next=8;return tx2.wait();case 8:receipt=_context6.sent;if(!(receipt.status===0)){_context6.next=11;break;}throw new Error(\"Transaction failed\");case 11:_context6.next=13;return this._updateAccount();case 13:_context6.next=21;break;case 15:_context6.prev=15;_context6.t0=_context6[\"catch\"](0);if(!(_context6.t0.code===ERROR_CODE_TX_REJECTED_BY_USER)){_context6.next=19;break;}return _context6.abrupt(\"return\");case 19:// Other errors are logged and stored in the Dapp's state. This is used to\n// show them to the user, and for debugging.\nconsole.error(_context6.t0);this.setState({transactionError:_context6.t0});case 21:_context6.prev=21;// If we leave the try/catch, we aren't sending a tx anymore, so we clear\n// this part of the state.\nthis.setState({txBeingSent:undefined});return _context6.finish(21);case 24:case\"end\":return _context6.stop();}}},_callee6,this,[[0,15,21,24]]);}));function _setAllowance(_x3,_x4){return _setAllowance2.apply(this,arguments);}return _setAllowance;}()// This method just clears part of the state.\n},{key:\"_dismissTransactionError\",value:function _dismissTransactionError(){this.setState({transactionError:undefined});}// This method just clears part of the state.\n},{key:\"_dismissNetworkError\",value:function _dismissNetworkError(){this.setState({networkError:undefined});}},{key:\"_dismissAccountError\",value:function _dismissAccountError(){this.setState({accountError:undefined});}// This is an utility method that turns an RPC error into a human readable\n// message.\n},{key:\"_getRpcErrorMessage\",value:function _getRpcErrorMessage(error){if(error.data){return error.data.message;}return error.message;}// This method resets the state\n},{key:\"_resetState\",value:function _resetState(){this.setState(this.initialState);}// This method checks if Metamask selected network is Localhost:8545 \n},{key:\"_checkNetwork\",value:function _checkNetwork(){if(window.ethereum.networkVersion===HARDHAT_NETWORK_ID){return true;}this.setState({networkError:'Please connect Metamask to Localhost:8545'});return false;}// This method checks if Metamask selected network is Localhost:8545 \n},{key:\"_checkAccounts\",value:function _checkAccounts(){if(this.state.selectedAddress===\"0x559bc07434c89c5496d790dfd2885dc966f9113a\"||this.state.selectedAddress===\"0x6dc89393fa30b64c56deff31daacf10cedcd852d\"||this.state.selectedAddress===\"0x54806dd512b21814aa560d627432a75720ed6bb3\"){return true;}this.setState({accountError:'Please use one of the first 3 accounts provided by hardhat '});return false;}}]);return Dapp;}(React.Component);","map":{"version":3,"sources":["/home/ruud/project/token-application/frontend/src/components/Dapp.js"],"names":["React","ethers","contractABI","contractADR","NoWalletDetected","ConnectWallet","Loading","Transfer","Allowance","TransactionErrorMessage","WaitingForTransactionMessage","NoTokensMessage","Contract","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","Dapp","props","initialState","tokenData","undefined","total","selectedAddress","selectedName","balance","allowance","txBeingSent","transactionError","networkError","accountError","state","window","ethereum","_connectWallet","_dismissNetworkError","_dismissAccountError","Math","round","decimals","toFixed","toString","_getRpcErrorMessage","_dismissTransactionError","eq","gt","to","amount","_transferTokens","symbol","spender","_setAllowance","_stopPollingData","enable","_checkNetwork","_initialize","_checkAccounts","on","newAddress","_resetState","networkId","userAddress","accounts","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","StableCoin","abi","getSigner","_pollDataInterval","setInterval","_updateAccount","clearInterval","name","totalSupply","address","balanceOf","transfer","tx","hash","wait","receipt","status","Error","code","console","error","approve","tx2","data","message","networkVersion","Component"],"mappings":"ymCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA,OAASC,MAAT,KAAuB,QAAvB,CAEA;AACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,CAEA;AACA;AACA;AACA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,OAAT,KAAwB,WAAxB,CACA,OAASC,QAAT,KAAyB,YAAzB,CACA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,uBAAT,KAAwC,2BAAxC,CACA,OAASC,4BAAT,KAA6C,gCAA7C,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,QAAT,KAAyB,YAAzB,CAGA;AACA;AACA;AACA,GAAMC,CAAAA,kBAAkB,CAAG,OAA3B,CAEA;AACA,GAAMC,CAAAA,8BAA8B,CAAG,IAAvC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAaC,CAAAA,IAAb,wGACE,cAAYC,KAAZ,CAAmB,sCACjB,uBAAMA,KAAN,EAEA;AACA;AACA,MAAKC,YAAL,CAAoB,CAClBC,SAAS,CAAEC,SADO,CAElBC,KAAK,CAAED,SAFW,CAGlBE,eAAe,CAAEF,SAHC,CAIlBG,YAAY,CAAEH,SAJI,CAKlBI,OAAO,CAAEJ,SALS,CAMlBK,SAAS,CAAEL,SANO,CAOlBM,WAAW,CAAEN,SAPK,CAQlBO,gBAAgB,CAAEP,SARA,CASlBQ,YAAY,CAAER,SATI,CAUlBS,YAAY,CAAET,SAVI,CAApB,CAaA,MAAKU,KAAL,CAAa,MAAKZ,YAAlB,CAlBiB,aAmBlB,CApBH,wDAwBW,iBAEP,GAAIa,MAAM,CAACC,QAAP,GAAoBZ,SAAxB,CAAmC,CACjC,mBAAO,oBAAC,gBAAD,MAAP,CACD,CAED,GAAI,CAAC,KAAKU,KAAL,CAAWR,eAAhB,CAAiC,CAC/B,mBACE,oBAAC,aAAD,EACE,aAAa,CAAE,+BAAM,CAAA,MAAI,CAACW,cAAL,EAAN,EADjB,CAEE,YAAY,CAAE,KAAKH,KAAL,CAAWF,YAF3B,CAGE,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACM,oBAAL,EAAN,EAHX,EADF,CAOD,CAED,GAAK,KAAKJ,KAAL,CAAWR,eAAX,GAA+B,4CAAhC,EACD,KAAKQ,KAAL,CAAWR,eAAX,GAA+B,4CAD9B,EAED,KAAKQ,KAAL,CAAWR,eAAX,GAA+B,4CAFlC,CAEiF,CAC/E,mBACE,oBAAC,aAAD,EACE,aAAa,CAAE,+BAAM,CAAA,MAAI,CAACW,cAAL,EAAN,EADjB,CAEE,YAAY,CAAE,KAAKH,KAAL,CAAWD,YAF3B,CAGE,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACM,oBAAL,EAAN,EAHX,EADF,CAOD,CAGD,GAAI,CAAC,KAAKL,KAAL,CAAWX,SAAZ,EAAyB,CAAC,KAAKW,KAAL,CAAWN,OAAzC,CAAkD,CAChD,mBAAO,oBAAC,OAAD,MAAP,CACD,CAED,GAAI,KAAKM,KAAL,CAAWP,YAAX,GAA4B,YAAhC,CAA8C,CAC5C,mBACE,2BAAK,SAAS,CAAC,EAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,QAAD,EAAU,SAAS,CAAE,KAAKO,KAAL,CAAWX,SAAhC,EADF,CADF,cAME,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,eAAf,eACE,uCADF,cAEE,6DACkB,6BAAI,KAAKW,KAAL,CAAWP,YAAf,CADlB,CAFF,cAKE,uDACY,6BAAI,KAAKO,KAAL,CAAWR,eAAf,CADZ,CALF,cAQE,uDACY,kCAAM,CAACc,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWN,OAAX,UAAqB,KAAKM,KAAL,CAAWX,SAAX,CAAqBmB,QAA1C,CAAsD,EAAtD,CAAX,WAAwE,KAAKR,KAAL,CAAWX,SAAX,CAAqBmB,QAA7F,CAAyG,EAAzG,CAAD,EAA+GC,OAA/G,CAAuH,KAAKT,KAAL,CAAWX,SAAX,CAAqBmB,QAA5I,EAAsJE,QAAtJ,EAAN,CADZ,CARF,cAWE,uDACY,kCAAM,CAACJ,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWL,SAAX,UAAuB,KAAKK,KAAL,CAAWX,SAAX,CAAqBmB,QAA5C,CAAwD,EAAxD,CAAX,WAA0E,KAAKR,KAAL,CAAWX,SAAX,CAAqBmB,QAA/F,CAA2G,EAA3G,CAAD,EAAiHC,OAAjH,CAAyH,KAAKT,KAAL,CAAWX,SAAX,CAAqBmB,QAA9I,EAAwJE,QAAxJ,EAAN,CADZ,CAXF,CADF,cAgBE,+BACG,KAAKV,KAAL,CAAWJ,WAAX,eAA2B,oBAAC,4BAAD,EAA8B,MAAM,CAAE,KAAKI,KAAL,CAAWJ,WAAjD,EAD9B,CAEG,KAAKI,KAAL,CAAWH,gBAAX,eACC,oBAAC,uBAAD,EACE,OAAO,CAAE,KAAKc,mBAAL,CAAyB,KAAKX,KAAL,CAAWH,gBAApC,CADX,CAEE,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACe,wBAAL,EAAN,EAFX,EAHJ,CAhBF,CANF,cAiCE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAIG,KAAKZ,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EALJ,CAcG,KAAKQ,KAAL,CAAWN,OAAX,CAAmBoB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,QAAD,EACE,cAAc,CAAE,wBAACC,EAAD,CAAKC,MAAL,QACd,CAAA,MAAI,CAACC,eAAL,CAAqBF,EAArB,CAAyBC,MAAzB,CADc,EADlB,CAIE,WAAW,CAAE,KAAKhB,KAAL,CAAWX,SAAX,CAAqB6B,MAJpC,EAfJ,CADF,CAjCF,cA2DE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAIG,KAAKlB,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EALJ,CAQG,KAAKQ,KAAL,CAAWN,OAAX,CAAmBoB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,SAAD,EACE,OAAO,CAAE,iBAACK,OAAD,CAAUH,MAAV,QACP,CAAA,MAAI,CAACI,aAAL,CAAmBD,OAAnB,CAA4BH,MAA5B,CADO,EADX,CAIE,WAAW,CAAE,KAAKhB,KAAL,CAAWX,SAAX,CAAqB6B,MAJpC,EATJ,CADF,cAkBE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAEG,KAAKlB,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EAHJ,CADF,CAlBF,CA3DF,CADF,CA6FD,CA9FD,IA8FO,CACL,mBACE,2BAAK,SAAS,CAAC,EAAf,eACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,QAAD,EAAU,SAAS,CAAE,KAAKQ,KAAL,CAAWX,SAAhC,EADF,CADF,cAME,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,eAAf,eACE,uCADF,cAEE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,OAAf,eACE,qCADF,cAEE,wCAFF,cAGE,wCAHF,cAIE,yCAJF,CADF,cAOE,2BAAK,SAAS,CAAC,OAAf,eACE,0CAAG,6BAAI,KAAKW,KAAL,CAAWP,YAAf,CAAH,CADF,cAEE,0CAAG,6BAAI,KAAKO,KAAL,CAAWR,eAAf,CAAH,CAFF,cAGE,0CAAG,kCAAM,CAACc,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWN,OAAX,UAAqB,KAAKM,KAAL,CAAWX,SAAX,CAAqBmB,QAA1C,CAAsD,EAAtD,CAAX,WAAwE,KAAKR,KAAL,CAAWX,SAAX,CAAqBmB,QAA7F,CAAyG,EAAzG,CAAD,EAA+GC,OAA/G,CAAuH,KAAKT,KAAL,CAAWX,SAAX,CAAqBmB,QAA5I,EAAsJE,QAAtJ,EAAN,CAAH,CAHF,cAIE,0CAAG,kCAAM,CAACJ,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWL,SAAX,UAAuB,KAAKK,KAAL,CAAWX,SAAX,CAAqBmB,QAA5C,CAAwD,EAAxD,CAAX,WAA0E,KAAKR,KAAL,CAAWX,SAAX,CAAqBmB,QAA/F,CAA2G,EAA3G,CAAD,EAAiHC,OAAjH,CAAyH,KAAKT,KAAL,CAAWX,SAAX,CAAqBmB,QAA9I,EAAwJE,QAAxJ,EAAN,CAAH,CAJF,CAPF,CAFF,CADF,cAkBE,+BAEG,KAAKV,KAAL,CAAWJ,WAAX,eAA2B,oBAAC,4BAAD,EAA8B,MAAM,CAAE,KAAKI,KAAL,CAAWJ,WAAjD,EAF9B,CAIG,KAAKI,KAAL,CAAWH,gBAAX,eACC,oBAAC,uBAAD,EACE,OAAO,CAAE,KAAKc,mBAAL,CAAyB,KAAKX,KAAL,CAAWH,gBAApC,CADX,CAEE,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACe,wBAAL,EAAN,EAFX,EALJ,CAlBF,CANF,cAoCE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAIG,KAAKZ,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EALJ,CAcG,KAAKQ,KAAL,CAAWN,OAAX,CAAmBoB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,QAAD,EACE,cAAc,CAAE,wBAACC,EAAD,CAAKC,MAAL,QACd,CAAA,MAAI,CAACC,eAAL,CAAqBF,EAArB,CAAyBC,MAAzB,CADc,EADlB,CAIE,WAAW,CAAE,KAAKhB,KAAL,CAAWX,SAAX,CAAqB6B,MAJpC,EAfJ,CADF,CApCF,cA8DE,2BAAK,SAAS,CAAC,UAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAIG,KAAKlB,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EALJ,CAQG,KAAKQ,KAAL,CAAWN,OAAX,CAAmBoB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,SAAD,EACE,OAAO,CAAE,iBAACK,OAAD,CAAUH,MAAV,QACP,CAAA,MAAI,CAACI,aAAL,CAAmBD,OAAnB,CAA4BH,MAA5B,CADO,EADX,CAIE,WAAW,CAAE,KAAKhB,KAAL,CAAWX,SAAX,CAAqB6B,MAJpC,EATJ,CADF,cAkBE,2BAAK,SAAS,CAAC,KAAf,eACE,2BAAK,SAAS,CAAC,OAAf,EAEG,KAAKlB,KAAL,CAAWN,OAAX,CAAmBmB,EAAnB,CAAsB,CAAtB,gBACC,oBAAC,eAAD,EAAiB,eAAe,CAAE,KAAKb,KAAL,CAAWR,eAA7C,EAHJ,CADF,CAlBF,CA9DF,CADF,CA+FD,CACF,CAxPH,mEA4PyB,CACrB;AACA;AACA,KAAK6B,gBAAL,GACD,CAhQH,+VAwQoCpB,CAAAA,MAAM,CAACC,QAAP,CAAgBoB,MAAhB,EAxQpC,2GAwQW9B,eAxQX,8BA6QS,KAAK+B,aAAL,EA7QT,iEAiRI,KAAKC,WAAL,CAAiBhC,eAAjB,EAjRJ,GAmRS,KAAKiC,cAAL,EAnRT,mEAuRI;AACAxB,MAAM,CAACC,QAAP,CAAgBwB,EAAhB,CAAmB,iBAAnB,CAAsC,cAAkB,kCAAhBC,UAAgB,UACtD,MAAI,CAACN,gBAAL,GACA;AACA;AACA;AACA;AACA,GAAIM,UAAU,GAAKrC,SAAnB,CAA8B,CAC5B,MAAO,CAAA,MAAI,CAACsC,WAAL,EAAP,CACD,CAED,MAAI,CAACJ,WAAL,CAAiBG,UAAjB,EACD,CAXD,EAaA;AACA1B,MAAM,CAACC,QAAP,CAAgBwB,EAAhB,CAAmB,gBAAnB,CAAqC,eAAiB,mCAAfG,SAAe,UACpD,MAAI,CAACR,gBAAL,GACA,MAAI,CAACO,WAAL,GACD,CAHD,EAtSJ,gNA4ScE,WA5Sd,CA4S2B,CAEvB,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACAA,QAAQ,CAAC,4CAAD,CAAR,CAAyD,YAAzD,CACAA,QAAQ,CAAC,4CAAD,CAAR,CAAyD,QAAzD,CACAA,QAAQ,CAAC,4CAAD,CAAR,CAAyD,QAAzD,CAGA,KAAKC,QAAL,CAAc,CACZvC,YAAY,CAAEsC,QAAQ,CAACD,WAAD,CADV,CAEZtC,eAAe,CAAEsC,WAFL,CAAd,EAKA;AACA;AAEA;AACA;AACA,KAAKG,gBAAL,GACA,KAAKC,aAAL,GACA,KAAKC,iBAAL,GACD,CAjUH,iQAoUI;AACA,KAAKC,SAAL,CAAiB,GAAIhE,CAAAA,MAAM,CAACiE,SAAP,CAAiBC,YAArB,CAAkCrC,MAAM,CAACC,QAAzC,CAAjB,CAEA;AACA;AACA,KAAKqC,MAAL,CAAc,GAAInE,CAAAA,MAAM,CAACW,QAAX,CACZT,WAAW,CAACkE,UADA,CAEZnE,WAAW,CAACoE,GAFA,CAGZ,KAAKL,SAAL,CAAeM,SAAf,CAAyB,CAAzB,CAHY,CAAd,CAzUJ,uKAkVE;AACA;AACA;AACA;AACA;AACA;AACA;AAxVF,6DAyVsB,iBAClB,KAAKC,iBAAL,CAAyBC,WAAW,CAAC,iBAAM,CAAA,MAAI,CAACC,cAAL,EAAN,EAAD,CAA8B,IAA9B,CAApC,CAEA,KAAKA,cAAL,GAED,CA9VH,2DAgWqB,CACjBC,aAAa,CAAC,KAAKH,iBAAN,CAAb,CACA,KAAKA,iBAAL,CAAyBrD,SAAzB,CACD,CAnWH,yTAsWuB,MAAKiD,MAAL,CAAYQ,IAAZ,EAtWvB,QAsWUA,IAtWV,uCAuWyB,MAAKR,MAAL,CAAYrB,MAAZ,EAvWzB,QAuWUA,MAvWV,uCAwW2B,MAAKqB,MAAL,CAAY/B,QAAZ,EAxW3B,QAwWUA,QAxWV,wCAyWwB,MAAK+B,MAAL,CAAYS,WAAZ,EAzWxB,SAyWUzD,KAzWV,wCA0W0B,MAAKgD,MAAL,CAAYU,OA1WtC,SA0WUA,OA1WV,gBA4WI,KAAKjB,QAAL,CAAc,CAAE3C,SAAS,CAAE,CAAE0D,IAAI,CAAJA,IAAF,CAAQ7B,MAAM,CAANA,MAAR,CAAgBV,QAAQ,CAARA,QAAhB,CAA0BjB,KAAK,CAALA,KAA1B,CAAiC0D,OAAO,CAAPA,OAAjC,CAAb,CAAd,EA5WJ,ycAgX0B,MAAKV,MAAL,CAAYW,SAAZ,CAAsB,KAAKlD,KAAL,CAAWR,eAAjC,CAhX1B,QAgXUE,OAhXV,gBAiXI,KAAKsC,QAAL,CAAc,CAAEtC,OAAO,CAAPA,OAAF,CAAd,EAjXJ,uBAmX4B,MAAK6C,MAAL,CAAY5C,SAAZ,CAAsB,KAAKK,KAAL,CAAWR,eAAjC,CAAkD,4CAAlD,CAnX5B,QAmXUG,SAnXV,gBAoXI,KAAKqC,QAAL,CAAc,CAAErC,SAAS,CAATA,SAAF,CAAd,EApXJ,0SAwXwBoB,EAxXxB,CAwX4BC,MAxX5B,sJA0XM;AACA;AACA;AACA,KAAKJ,wBAAL,GAEA;AACA;AAhYN,uBAiYuB,MAAK2B,MAAL,CAAYY,QAAZ,CAAqBpC,EAArB,CAAyBC,MAAzB,CAjYvB,QAiYYoC,EAjYZ,gBAkYM,KAAKpB,QAAL,CAAc,CAAEpC,WAAW,CAAEwD,EAAE,CAACC,IAAlB,CAAd,EAEA;AACA;AArYN,uBAsY4BD,CAAAA,EAAE,CAACE,IAAH,EAtY5B,QAsYYC,OAtYZ,qBAyYUA,OAAO,CAACC,MAAR,GAAmB,CAzY7B,iCA4Yc,IAAIC,CAAAA,KAAJ,CAAU,oBAAV,CA5Yd,iCAiZY,MAAKZ,cAAL,EAjZZ,mGAqZU,aAAMa,IAAN,GAAezE,8BArZzB,sEAyZM;AACA;AACA0E,OAAO,CAACC,KAAR,eACA,KAAK5B,QAAL,CAAc,CAAEnC,gBAAgB,aAAlB,CAAd,EA5ZN,0BA8ZM;AACA;AACA,KAAKmC,QAAL,CAAc,CAAEpC,WAAW,CAAEN,SAAf,CAAd,EAhaN,2VAoasB6B,OApatB,CAoa+BH,MApa/B,uJAuaM;AACA;AACA;AACA,KAAKJ,wBAAL,GAEA;AACA;AA7aN,uBA8awB,MAAK2B,MAAL,CAAYsB,OAAZ,CAAoB1C,OAApB,CAA6BH,MAA7B,CA9axB,QA8aY8C,GA9aZ,gBA+aM,KAAK9B,QAAL,CAAc,CAAEpC,WAAW,CAAEkE,GAAG,CAACT,IAAnB,CAAd,EAEA;AACA;AAlbN,uBAmb4BS,CAAAA,GAAG,CAACR,IAAJ,EAnb5B,QAmbYC,OAnbZ,qBAsbUA,OAAO,CAACC,MAAR,GAAmB,CAtb7B,iCAybc,IAAIC,CAAAA,KAAJ,CAAU,oBAAV,CAzbd,iCA8bY,MAAKZ,cAAL,EA9bZ,mGAkcU,aAAMa,IAAN,GAAezE,8BAlczB,sEAscM;AACA;AACA0E,OAAO,CAACC,KAAR,eACA,KAAK5B,QAAL,CAAc,CAAEnC,gBAAgB,aAAlB,CAAd,EAzcN,0BA2cM;AACA;AACA,KAAKmC,QAAL,CAAc,CAAEpC,WAAW,CAAEN,SAAf,CAAd,EA7cN,iNAidE;AAjdF,2EAkd6B,CACzB,KAAK0C,QAAL,CAAc,CAAEnC,gBAAgB,CAAEP,SAApB,CAAd,EACD,CAED;AAtdF,mEAudyB,CACrB,KAAK0C,QAAL,CAAc,CAAElC,YAAY,CAAER,SAAhB,CAAd,EACD,CAzdH,mEA2dyB,CACrB,KAAK0C,QAAL,CAAc,CAAEjC,YAAY,CAAET,SAAhB,CAAd,EACD,CACD;AACA;AA/dF,gEAgesBsE,KAhetB,CAge6B,CACzB,GAAIA,KAAK,CAACG,IAAV,CAAgB,CACd,MAAOH,CAAAA,KAAK,CAACG,IAAN,CAAWC,OAAlB,CACD,CAED,MAAOJ,CAAAA,KAAK,CAACI,OAAb,CACD,CAED;AAxeF,iDAyegB,CACZ,KAAKhC,QAAL,CAAc,KAAK5C,YAAnB,EACD,CAED;AA7eF,qDA8ekB,CACd,GAAIa,MAAM,CAACC,QAAP,CAAgB+D,cAAhB,GAAmCjF,kBAAvC,CAA2D,CACzD,MAAO,KAAP,CACD,CAED,KAAKgD,QAAL,CAAc,CACZlC,YAAY,CAAE,2CADF,CAAd,EAIA,MAAO,MAAP,CACD,CAED;AA1fF,uDA2fmB,CACf,GAAK,KAAKE,KAAL,CAAWR,eAAX,GAA+B,4CAAhC,EACD,KAAKQ,KAAL,CAAWR,eAAX,GAA+B,4CAD9B,EAED,KAAKQ,KAAL,CAAWR,eAAX,GAA+B,4CAFlC,CAEiF,CAC/E,MAAO,KAAP,CACD,CACD,KAAKwC,QAAL,CAAc,CACZjC,YAAY,CAAE,6DADF,CAAd,EAIA,MAAO,MAAP,CACD,CAtgBH,kBAA0B5B,KAAK,CAAC+F,SAAhC","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport contractABI from \"../contracts/StableUSD-abi.json\";\nimport contractADR from \"../contracts/StableUSD-adr.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { Contract } from \"./Contract\";\n\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      tokenData: undefined,\n      total: undefined,\n      selectedAddress: undefined,\n      selectedName: undefined,\n      balance: undefined,\n      allowance: undefined,\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      accountError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n\n\n  render() {\n\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    if ((this.state.selectedAddress !== \"0x559bc07434c89c5496d790dfd2885dc966f9113a\") &&\n      (this.state.selectedAddress !== \"0x6dc89393fa30b64c56deff31daacf10cedcd852d\") &&\n      (this.state.selectedAddress !== \"0x54806dd512b21814aa560d627432a75720ed6bb3\")) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          accountError={this.state.accountError}\n          dismiss={() => this._dismissAccountError()}\n        />\n      );\n    }\n\n\n    if (!this.state.tokenData || !this.state.balance) {\n      return <Loading />;\n    }\n\n    if (this.state.selectedName === \"controller\") {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"row\">\n            <div className=\"container p-3\">\n              <h2>Wallet</h2>\n              <p>\n                Holder's name:  <b>{this.state.selectedName}</b>\n              </p>\n              <p>\n                Address:  <b>{this.state.selectedAddress}</b>\n              </p>\n              <p>\n                Balance:  <b>$ {(Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n              </p>\n              <p>\n                Allowed:  <b>$ {(Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n              </p>\n            </div>\n            <div>\n              {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n              {this.state.transactionError && (\n                <TransactionErrorMessage\n                  message={this._getRpcErrorMessage(this.state.transactionError)}\n                  dismiss={() => this._dismissTransactionError()}\n                />)}\n  \n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n                This component displays a form that the user can use to send a \n                transaction and transfer some tokens.\n                The component doesn't have logic, it just calls the transferTokens\n                callback.\n              */}\n              {this.state.balance.gt(0) && (\n                <Transfer\n                  transferTokens={(to, amount) =>\n                    this._transferTokens(to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n          </div>\n\n          <div className=\"row card\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n            <div className=\"row\">\n              <div className=\"col-4\">\n\n                {this.state.balance.eq(0) && (\n                  <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n                )}\n\n\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n\n\n    } else {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"row\">\n            <div className=\"container p-3\">\n              <h2>Wallet</h2>\n              <div className=\"row\">\n                <div className=\"col-6\">\n                  <p>Name:</p>\n                  <p>Address:</p>\n                  <p>Balance:</p>\n                  <p>Approved:</p>\n                </div>\n                <div className=\"col-6\">\n                  <p><b>{this.state.selectedName}</b></p>\n                  <p><b>{this.state.selectedAddress}</b></p>\n                  <p><b>$ {(Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                  <p><b>$ {(Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                </div>\n              </div>\n            </div>\n            <div>\n\n              {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n\n              {this.state.transactionError && (\n                <TransactionErrorMessage\n                  message={this._getRpcErrorMessage(this.state.transactionError)}\n                  dismiss={() => this._dismissTransactionError()}\n                />)}\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {/*\n                This component displays a form that the user can use to send a \n                transaction and transfer some tokens.\n                The component doesn't have logic, it just calls the transferTokens\n                callback.\n              */}\n              {this.state.balance.gt(0) && (\n                <Transfer\n                  transferTokens={(to, amount) =>\n                    this._transferTokens(to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n          </div>\n\n          <div className=\"row card\">\n            <div className=\"col-4\">\n              {/*\n                If the user has no tokens, we don't show the Tranfer form\n              */}\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n\n              {this.state.balance.gt(0) && (\n                <Allowance\n                  approve={(spender, amount) =>\n                    this._setAllowance(spender, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                />\n              )}\n            </div>\n            <div className=\"row\">\n              <div className=\"col-4\">\n\n                {this.state.balance.eq(0) && (\n                  <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n                )}\n\n\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n\n    }\n  }\n\n\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    if (!this._checkAccounts()) {\n      return;\n    }\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n\n    let accounts = []\n    accounts['0x559bc07434c89c5496d790dfd2885dc966f9113a'] = \"controller\"\n    accounts['0x54806dd512b21814aa560d627432a75720ed6bb3'] = \"party1\"\n    accounts['0x6dc89393fa30b64c56deff31daacf10cedcd852d'] = \"party2\"\n\n\n    this.setState({\n      selectedName: accounts[userAddress],\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      contractADR.StableCoin,\n      contractABI.abi,\n      this._provider.getSigner(0)\n    );\n\n\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000);\n\n    this._updateAccount();\n\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n    const address = await this._token.address;\n\n    this.setState({ tokenData: { name, symbol, decimals, total, address } });\n  }\n\n  async _updateAccount() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n\n    const allowance = await this._token.allowance(this.state.selectedAddress, \"0x559BC07434C89c5496d790DFD2885dC966F9113a\");\n    this.setState({ allowance });\n\n  }\n\n  async _transferTokens(to, amount) {\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _setAllowance(spender, amount) {\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx2 = await this._token.approve(spender, amount);\n      this.setState({ txBeingSent: tx2.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx2.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateAccount();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _dismissAccountError() {\n    this.setState({ accountError: undefined });\n  }\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkAccounts() {\n    if ((this.state.selectedAddress === \"0x559bc07434c89c5496d790dfd2885dc966f9113a\") ||\n      (this.state.selectedAddress === \"0x6dc89393fa30b64c56deff31daacf10cedcd852d\") ||\n      (this.state.selectedAddress === \"0x54806dd512b21814aa560d627432a75720ed6bb3\")) {\n      return true;\n    }\n    this.setState({\n      accountError: 'Please use one of the first 3 accounts provided by hardhat '\n    });\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}